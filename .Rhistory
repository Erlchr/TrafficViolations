names(test_data)[names(test_data) == "od"] = "order_date"
names(training_data)[names(training_data) == "dd"] = "delivery_date"
names(test_data)[names(test_data) == "dd"] = "delivery_date"
names(training_data)[names(training_data) == "a6"] = "salutation"
names(test_data)[names(test_data) == "a6"] = "salutation"
names(training_data)[names(training_data) == "a7"] = "date_of_birth"
names(test_data)[names(test_data) == "a7"] = "date_of_birth"
names(training_data)[names(training_data) == "a8"] = "state"
names(test_data)[names(test_data) == "a8"] = "state"
names(training_data)[names(training_data) == "a9"] = "return_shipment"
names(test_data)[names(test_data) == "a9"] = "return_shipment"
# Nominal attributes
table(training_data$salutation)
table(test_data$salutation)
SALUTATION_LEVELS = c("Company", "Mr.", "Mrs.")
training_data$salutation = factor(training_data$salutation, levels=2:4, labels=SALUTATION_LEVELS)
test_data$salutation = factor(test_data$salutation, levels=2:4, labels=SALUTATION_LEVELS)
table(training_data$salutation)
table(test_data$salutation)
# If a nominal or ordinal column in the test data set contains more levels than the corresponding column in the training data set, you can add levels to the column in the training data set manually using the following command:
#training_data$salutation = factor(training_data$salutation, levels=c(levels(training_data$salutation), "Family"))
table(training_data$state)
table(test_data$state)
STATE_LEVELS = c("BW", "BY", "BE", "BB", "HB", "HH", "HE", "MV", "NI", "NW", "RP", "SL", "SN", "ST", "SH", "TH")
training_data$state = factor(training_data$state, levels=1:16, labels=STATE_LEVELS)
test_data$state = factor(test_data$state, levels=1:16, labels=STATE_LEVELS)
table(training_data$state)
table(test_data$state)
RETURN_LEVELS = c("0", "1")
training_data$return_shipment = factor(training_data$return_shipment, labels=RETURN_LEVELS)
#test_data$return_shipment = factor(test_data$return_shipment, labels=RETURN_LEVELS)
# Unify "size" column
table(training_data$size)
training_data$size = toupper(training_data$size)
test_data$size = toupper(test_data$size)
table(training_data$size)
# Convert "size" to ordinal
SIZE_LEVELS = c("S", "M", "L", "XL", "XXL", "XXXL")
training_data$size = ordered(training_data$size, levels=SIZE_LEVELS)
test_data$size = ordered(test_data$size, levels=SIZE_LEVELS)
# Date attributes
date_format = "%Y-%m-%d"
training_data$order_date = as.Date(training_data$order_date, date_format)
test_data$order_date = as.Date(test_data$order_date, date_format)
training_data$delivery_date = as.Date(training_data$delivery_date, date_format)
test_data$delivery_date = as.Date(test_data$delivery_date, date_format)
training_data$date_of_birth = as.Date(training_data$date_of_birth, date_format)
test_data$date_of_birth = as.Date(test_data$date_of_birth, date_format)
training_data$order_date_weekday = as.factor(weekdays(training_data$order_date))
test_data$order_date_weekday = as.factor(weekdays(test_data$order_date))
training_data$order_date_year = as.numeric(format(training_data$order_date, "%Y"))
test_data$order_date_year = as.numeric(format(test_data$order_date, "%Y"))
training_data$order_date_month = as.numeric(format(training_data$order_date, "%m"))
test_data$order_date_month = as.numeric(format(test_data$order_date, "%m"))
training_data$order_date_day = as.numeric(format(training_data$order_date, "%d"))
test_data$order_date_day = as.numeric(format(test_data$order_date, "%d"))
training_data$order_date_quarter = ceiling(as.numeric(format(training_data$order_date, "%m")) / 3)
test_data$order_date_quarter = ceiling(as.numeric(format(test_data$order_date, "%m")) / 3)
# As an alternative regarding date values you could also use the "lubridate" package
# Calculate new column "delivery time" as difference of order and delivery dates in days
training_data$delivery_time = as.numeric(training_data$delivery_date - training_data$order_date)
test_data$delivery_time = as.numeric(test_data$delivery_date - test_data$order_date)
hist(training_data$delivery_time)
table(training_data$delivery_time, useNA="ifany")
# Negative delivery time is impossible
training_data$order_date[training_data$delivery_time < 0] = NA
test_data$order_date[test_data$delivery_time < 0] = NA
training_data$delivery_date[training_data$delivery_time < 0] = NA
test_data$delivery_date[test_data$delivery_time < 0] = NA
training_data$delivery_time[training_data$delivery_time < 0] = NA
test_data$delivery_time[test_data$delivery_time < 0] = NA
hist(training_data$delivery_time)
table(training_data$delivery_time, useNA="ifany")
boxplot(training_data$delivery_time ~ training_data$return_shipment)
# Manual discretization of "delivery time"
training_data$delivery_time_discret = factor(rep("NA", nrow(training_data)), levels=c("NA", "<= 5d", "> 5d"))
test_data$delivery_time_discret = factor(rep("NA", nrow(test_data)), levels=c("NA", "<= 5d", "> 5d"))
training_data$delivery_time_discret[training_data$delivery_time <= 5] = "<= 5d"
test_data$delivery_time_discret[test_data$delivery_time <= 5] = "<= 5d"
training_data$delivery_time_discret[training_data$delivery_time > 5] = "> 5d"
test_data$delivery_time_discret[test_data$delivery_time > 5] = "> 5d"
# Binning/Discretization
#install.packages("arules")
library(arules)
# Equal frequency binning
equal_frequency_cuts_delivery_time = discretize(training_data$delivery_time, categories=5, method="frequency", onlycuts=TRUE)
training_data$delivery_time_discret_ef = cut(training_data$delivery_time, breaks=equal_frequency_cuts_delivery_time, ordered_result=TRUE, right=FALSE)
test_data$delivery_time_discret_ef = cut(test_data$delivery_time, breaks=equal_frequency_cuts_delivery_time, ordered_result=TRUE, right=FALSE)
table(training_data$delivery_time_discret_ef, useNA="ifany")
str(training_data)
training_data = training_data[!is.na(training_data$order_date),]
training_data = training_data[!is.na(training_data$order_date),]
training_data = training_data[!is.na(training_data$delivery_time),]
training_data = training_data[!is.na(training_data$delivery_time_discret),]
training_data = training_data[!is.na(training_data$price),]
training_data = training_data[!is.na(training_data$delivery_time_discret_ef),]
training_data = training_data[!is.na(training_data$order_date),]
######################################################
# 2. Load & Explore the Training Data Set
# See Tutorial 1
training_data = read.csv("training.csv", sep=",")
# Show the structure
str(training_data)
# Size
nrow(training_data)
ncol(training_data)
# Show the first and last rows
head(training_data)
tail(training_data)
# Show columns with missing values
colSums(is.na(training_data))
# Explore the class column
table(training_data$a9)
# Explore the price column
mean(training_data$price)
# mean without N/A values
mean(training_data$price, na.rm=TRUE)
aggregate(x=training_data$price, by=list(training_data$a9), FUN=mean, na.rm=TRUE)
hist(training_data$price)
boxplot(training_data$price ~ training_data$a9)
######################################################
# 3. Data Preparation
# (using both training and test data)
# do NOT DELETE any instances in the test data
test_data = read.csv("test.csv", sep=",")
# Rename columns
names(training_data)
names(training_data)[names(training_data) == "od"] = "order_date"
names(test_data)[names(test_data) == "od"] = "order_date"
names(training_data)[names(training_data) == "dd"] = "delivery_date"
names(test_data)[names(test_data) == "dd"] = "delivery_date"
names(training_data)[names(training_data) == "a6"] = "salutation"
names(test_data)[names(test_data) == "a6"] = "salutation"
names(training_data)[names(training_data) == "a7"] = "date_of_birth"
names(test_data)[names(test_data) == "a7"] = "date_of_birth"
names(training_data)[names(training_data) == "a8"] = "state"
names(test_data)[names(test_data) == "a8"] = "state"
names(training_data)[names(training_data) == "a9"] = "return_shipment"
names(test_data)[names(test_data) == "a9"] = "return_shipment"
# Nominal attributes
table(training_data$salutation)
table(test_data$salutation)
SALUTATION_LEVELS = c("Company", "Mr.", "Mrs.")
training_data$salutation = factor(training_data$salutation, levels=2:4, labels=SALUTATION_LEVELS)
test_data$salutation = factor(test_data$salutation, levels=2:4, labels=SALUTATION_LEVELS)
table(training_data$salutation)
table(test_data$salutation)
# If a nominal or ordinal column in the test data set contains more levels than the corresponding column in the training data set, you can add levels to the column in the training data set manually using the following command:
#training_data$salutation = factor(training_data$salutation, levels=c(levels(training_data$salutation), "Family"))
table(training_data$state)
table(test_data$state)
STATE_LEVELS = c("BW", "BY", "BE", "BB", "HB", "HH", "HE", "MV", "NI", "NW", "RP", "SL", "SN", "ST", "SH", "TH")
training_data$state = factor(training_data$state, levels=1:16, labels=STATE_LEVELS)
test_data$state = factor(test_data$state, levels=1:16, labels=STATE_LEVELS)
table(training_data$state)
table(test_data$state)
RETURN_LEVELS = c("0", "1")
training_data$return_shipment = factor(training_data$return_shipment, labels=RETURN_LEVELS)
#test_data$return_shipment = factor(test_data$return_shipment, labels=RETURN_LEVELS)
# Unify "size" column
table(training_data$size)
training_data$size = toupper(training_data$size)
test_data$size = toupper(test_data$size)
table(training_data$size)
# Convert "size" to ordinal
SIZE_LEVELS = c("S", "M", "L", "XL", "XXL", "XXXL")
training_data$size = ordered(training_data$size, levels=SIZE_LEVELS)
test_data$size = ordered(test_data$size, levels=SIZE_LEVELS)
# Date attributes
date_format = "%Y-%m-%d"
training_data$order_date = as.Date(training_data$order_date, date_format)
test_data$order_date = as.Date(test_data$order_date, date_format)
training_data$delivery_date = as.Date(training_data$delivery_date, date_format)
test_data$delivery_date = as.Date(test_data$delivery_date, date_format)
training_data$date_of_birth = as.Date(training_data$date_of_birth, date_format)
test_data$date_of_birth = as.Date(test_data$date_of_birth, date_format)
training_data$order_date_weekday = as.factor(weekdays(training_data$order_date))
test_data$order_date_weekday = as.factor(weekdays(test_data$order_date))
training_data$order_date_year = as.numeric(format(training_data$order_date, "%Y"))
test_data$order_date_year = as.numeric(format(test_data$order_date, "%Y"))
training_data$order_date_month = as.numeric(format(training_data$order_date, "%m"))
test_data$order_date_month = as.numeric(format(test_data$order_date, "%m"))
training_data$order_date_day = as.numeric(format(training_data$order_date, "%d"))
test_data$order_date_day = as.numeric(format(test_data$order_date, "%d"))
training_data$order_date_quarter = ceiling(as.numeric(format(training_data$order_date, "%m")) / 3)
test_data$order_date_quarter = ceiling(as.numeric(format(test_data$order_date, "%m")) / 3)
# As an alternative regarding date values you could also use the "lubridate" package
# Calculate new column "delivery time" as difference of order and delivery dates in days
training_data$delivery_time = as.numeric(training_data$delivery_date - training_data$order_date)
test_data$delivery_time = as.numeric(test_data$delivery_date - test_data$order_date)
hist(training_data$delivery_time)
table(training_data$delivery_time, useNA="ifany")
# Negative delivery time is impossible
training_data$order_date[training_data$delivery_time < 0] = NA
test_data$order_date[test_data$delivery_time < 0] = NA
training_data$delivery_date[training_data$delivery_time < 0] = NA
test_data$delivery_date[test_data$delivery_time < 0] = NA
training_data$delivery_time[training_data$delivery_time < 0] = NA
test_data$delivery_time[test_data$delivery_time < 0] = NA
hist(training_data$delivery_time)
table(training_data$delivery_time, useNA="ifany")
boxplot(training_data$delivery_time ~ training_data$return_shipment)
# Manual discretization of "delivery time"
training_data$delivery_time_discret = factor(rep("NA", nrow(training_data)), levels=c("NA", "<= 5d", "> 5d"))
test_data$delivery_time_discret = factor(rep("NA", nrow(test_data)), levels=c("NA", "<= 5d", "> 5d"))
training_data$delivery_time_discret[training_data$delivery_time <= 5] = "<= 5d"
test_data$delivery_time_discret[test_data$delivery_time <= 5] = "<= 5d"
training_data$delivery_time_discret[training_data$delivery_time > 5] = "> 5d"
test_data$delivery_time_discret[test_data$delivery_time > 5] = "> 5d"
# Binning/Discretization
#install.packages("arules")
library(arules)
# Equal frequency binning
equal_frequency_cuts_delivery_time = discretize(training_data$delivery_time, categories=5, method="frequency", onlycuts=TRUE)
training_data$delivery_time_discret_ef = cut(training_data$delivery_time, breaks=equal_frequency_cuts_delivery_time, ordered_result=TRUE, right=FALSE)
test_data$delivery_time_discret_ef = cut(test_data$delivery_time, breaks=equal_frequency_cuts_delivery_time, ordered_result=TRUE, right=FALSE)
table(training_data$delivery_time_discret_ef, useNA="ifany")
str(training_data)
# Multicollinearity
library(caret)
numeric_columns = c("price", "tax", "order_date_day", "order_date_month", "delivery_time")
# these columns also contain N/A values --> the option "pairwise.complete.obs" should be used
numeric_columns_correlation = cor(training_data[, numeric_columns], use="pairwise.complete.obs")
numeric_columns_correlation
# works for non-N/A only (remove N/A rows or fill with mean, median, etc)
high_cor_columns = findCorrelation(numeric_columns_correlation)
high_cor_columns
# "price" and "tax" are perfectly correlated --> remove "tax" column
training_data$tax = NULL
test_data$tax = NULL
# Preprocessing: imputation with knn or median/mean values
colSums(is.na(training_data))
na_col = colnames(training_data[sapply(training_data,is.numeric)])
na_col
pp<- preProcess(training_data[na_col],
method = c("medianImpute"))
preprocessed <- predict(pp, newdata = training_data[na_col])
colSums(is.na(preprocessed))
# Feature Selection
Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre') # for 64-bit version
install.packages("FSelector")
library(FSelector)
#/Library/Java/JavaVirtualMachines/jdk1.8.0_65.jdk/Contents/Home/jre
# Calculate weights for the attributes using Info Gain and Gain Ratio
weights_info_gain = information.gain(return_shipment ~ ., data=training_data)
weights_info_gain
weights_gain_ratio = gain.ratio(return_shipment ~ ., data=training_data)
weights_gain_ratio
# Select the most important attributes based on Gain Ratio
most_important_attributes <- cutoff.k(weights_gain_ratio, 7)
most_important_attributes
formula_with_most_important_attributes <- return_shipment ~ delivery_date + delivery_time + delivery_time_discret + salutation + price + delivery_time_discret_ef + order_date
formula_with_most_important_attributes
install.packages("FSelector")
summary(training_data)
fitCtrl = trainControl(method="repeatedcv", number=5, repeats=2,savePredictions = TRUE)
model_dt = train(formula_with_most_important_attributes, data=training_data, method="J48", trControl=fitCtrl, metric="Accuracy", tuneGrid=data.frame(C=c(0.1, 0.2, 0.3, 0.4)))
formula_with_most_important_attributes <- return_shipment ~ order_date_weekday + order_date_month + order_date_day + order_date_quarter + state
fitCtrl = trainControl(method="repeatedcv", number=5, repeats=2,savePredictions = TRUE)
model_dt = train(formula_with_most_important_attributes, data=training_data, method="J48", trControl=fitCtrl, metric="Accuracy", tuneGrid=data.frame(C=c(0.1, 0.2, 0.3, 0.4)))
library(sp)
library(raster)
library(dplyr)
select <- dplyr:: select
library(ggmap)
library(ggplot2)
library(utils)
library(lubridate)
library(chron) # Date
library(caret)
library(MASS)
library(rpart)
library(rpart.plot)
library(stringdist)
library(lattice)
library(caret)
dataCSVFileName = "traffic_violations.csv"
dataRDSFileName = "traffic_violations.rds"
# Save CSV as Binary
if(!file.exists(dataRDSFileName)) {
dataCSV = read.csv(dataCSVFileName)
saveRDS(dataCSV, dataRDSFileName)
}
# Read Data
data.raw = readRDS(dataRDSFileName)
setwd("~/Documents/Studium/Semester 3/E-Business Infrastructure/Group Project/Source")
dataCSVFileName = "traffic_violations.csv"
dataRDSFileName = "traffic_violations.rds"
# Save CSV as Binary
if(!file.exists(dataRDSFileName)) {
dataCSV = read.csv(dataCSVFileName)
saveRDS(dataCSV, dataRDSFileName)
}
# Read Data
data.raw = readRDS(dataRDSFileName)
preparePolygon <- function(x) {
rtp <- rasterToPolygons(x)
rtp@data$id <- 1:nrow(rtp@data) # add id column for join
rtpFort <- fortify(rtp, data = rtp@data)
rtpFortMer <- merge(rtpFort, rtp@data, by.x = 'id', by.y = 'id')  # join data
return(rtpFortMer)
}
create_map <- function(location = "Montgomery County", zoom = 10, show.border = TRUE) {
montgomery = ggmap(get_map(location = location, maptype = "terrain", zoom = zoom), extent = "device")
if (show.border) {
maryland = subset(getData("GADM", country="USA", level=2), NAME_1 == "Maryland")
montgomery = montgomery + geom_polygon(data=maryland, aes(x=long, y=lat), alpha = 0.1, fill = NA, color = "black")
}
return(montgomery)
}
#---------- END HELPER METHODS ----------#
#---------- START DATA PREPARATION ----------#
data = data.raw
### Add, Update & Remove Variables
# Add Day & Interval
seconds = minutes(chron::times(data$Time.Of.Stop)) * 60 + hours(chron::times(data$Time.Of.Stop)) * 60 * 60
cuts <- c(-Inf, 6 * 60 * 60, 21600 * 2, 21600 * 3, Inf)
labs <- c(0,1,2,3)
assignedInterval = labs[findInterval(seconds, cuts)]
data = mutate(data, Interval = paste(assignedInterval))
data$Interval = as.factor(data$Interval) # training_data <- training_data %>% mutate_if(is.character,as.factor)
# Add column with weekdays: 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday
data = mutate(data, Day = paste( wday(as.Date(data$Date.Of.Stop, format = "%m/%d/%Y"), label = FALSE)-1))
data$Day <- factor(data$Day, levels= c(0,1,2,3,4,5,6))
# Add Category
categories = c("Speed", "Red Lights", "License", "Registration", "Driving Failure", "Alcohol", "Electronic Device", "Unsafe Vehicle", "Wrong Way")
data = mutate(data, Category = as.character(data$Description))
data$Category = gsub("LIC.", "LICENSE", data$Category)
data$Category = gsub("ZON", "ZONE", data$Category)
data$Category = gsub("(VEHICLE|VEHICL|VEH)", "VEHICLE", data$Category)
data$Category = gsub("HWY", "HIGHWAY", data$Category)
data$Category = gsub("(REGISTRATION|REGISTR|REG.)", "REGISTRATION", data$Category)
data$Category = gsub("REQUIR ", "REQUIRED", data$Category)
data$Category = gsub("MOT ", "MOTOR", data$Category)
data$Category = gsub("MSG.", "MESSAGE", data$Category)
data$Category = gsub("PLATES", "PLATE", data$Category)
data$Category = gsub(".*SPEED.*", "Speed", data$Category)
data$Category = gsub(".*(ONE WAY|WRONG WAY).*", "Wrong Way", data$Category)
data$Category = gsub(".*(RED LIGHTS|RED SIGNAL|RED TRAFFIC SIGNAL|STOP LIGHTS|FAILURE TO STOP|STOPLIGHT|STOP AT SIGN|REQUIRED STOP|STOP SIGN|STOP AT SIGN|RED ARROW).*", "Red Lights", data$Category)
data$Category = gsub(".*(LICENSE|PERMIT DRIVING|UNAUTHORIZED).*", "License", data$Category)
data$Category = gsub(".*(REGISTRATION|UNREGISTERED|PLATE).*", "Registration", data$Category)
data$Category = gsub(".*(AGGRESSIVE|NEGLIGENT|RECKLESS|TURN|BACKING|IMPRUDENT|PEDESTRIAN|SOUND|NOIS(E|Y)|FAILURE OF DRIVER|DRIVER (FAILING|FAILURE)|VEHICLE.*TOO CLOSELY|OVERTAKEN|OFF ROADWAY|CARELESS|YIELD|LANE|IMPROPER ROAD POSITION|DRIVE RIGHT|YIELD RIGHT|RIGHT HALF|FOLLOWING VEHICLE CLOSER|PARKING|PARK).*", "Driving Failure", data$Category)
data$Category = gsub(".*(ALCOHOL|DRUG).*", "Alcohol", data$Category)
data$Category = gsub(".*(TELEPHONE|PHONE|(READING|WRITING) .* MESSAGE).*", "Electronic Device", data$Category)
# data$Category = gsub(".*(TELEPHONE|EARPHONES|EARPLUGS|PHONE|(READING|WRITING) .* MESSAGE|HEADSET).*", "Electronic Device", data$Category)
data$Category = gsub(".*(GLASS|LAMP|BELT|UNINSURED VEHICLE|LAMPS|HEADLIGHT|SUSPENSION|TAILLIGHT|DASH LIGHTS|EYE PROTECTION|SHOCKS|WHEEL|TURN SIGNALS|WINDSHIELD|UNSECURED LOADED VEHICLE|EXHAUST SYSTEM|WINDOW TINT|FAILURE OF VEHICLE|TIRES|MIRRORS|FENDERS|BUMPERS|HEADLIGHTS|BRAKING|REFLECTOR|UNSAFE VEHICLE|EQUIPMENT|TAG LIGHTS|TAILLIGHTS|EQUIP|BRAKE).*", "Unsafe Vehicle", data$Category)
data$Category = as.factor(ifelse(data$Category %in% categories, data$Category, "Other"))
summary(data$Category)
# Remove redundant location information
# Remove columns which has always the same value like "Agency = MCP" in each row of data
# Remove irrelevant/unnecessary columns for analysis
data = select(data, -Agency, -Accident, -Commercial.Vehicle)
data = select(data, -Location, -Geolocation)
data = select(data, -Time.Of.Stop, -Date.Of.Stop)
data = select(data, -Commercial.License, -Work.Zone, -State, -Model, -DL.State)
data = select(data, -Fatal, -HAZMAT, -Charge, -Article)
data = select(data, -SubAgency, -Alcohol, -Driver.City, -Arrest.Type, -Driver.State)
data = select(data, -Belts)
# Update Vehicle Type
data$VehicleType = as.character(data$VehicleType)
data$VehicleType[data$VehicleType=="01 - Motorcycle"]           = "Motorcycle"
data$VehicleType[data$VehicleType=="02 - Automobile"]           = "Automobile"
data$VehicleType[data$VehicleType=="03 - Station Wagon"]        = "Automobile"
data$VehicleType[data$VehicleType=="04 - Limousine"]            = "Automobile"
data$VehicleType[data$VehicleType=="05 - Light Duty Truck"]     = "Truck"
data$VehicleType[data$VehicleType=="06 - Heavy Duty Truck"]     = "Truck"
data$VehicleType[data$VehicleType=="07 - Truck/Road Tractor"]   = "Truck"
data$VehicleType[data$VehicleType=="08 - Recreational Vehicle"] = "Truck"
data$VehicleType[data$VehicleType=="09 - Farm Vehicle"]         = "Truck"
data$VehicleType[data$VehicleType=="10 - Transit Bus"]          = "Truck"
data$VehicleType[data$VehicleType=="11 - Cross Country Bus"]    = "Truck"
data$VehicleType[data$VehicleType=="12 - School Bus"]           = "Truck"
data$VehicleType[data$VehicleType=="13 - Ambulance(Emerg)"]     = "Truck"
data$VehicleType[data$VehicleType=="14 - Ambulance(Non-Emerg)"] = "Truck"
data$VehicleType[data$VehicleType=="16 - Fire(Non-Emerg)"]      = "Truck"
data$VehicleType[data$VehicleType=="18 - Police(Non-Emerg)"]    = "Automobile"
data$VehicleType[data$VehicleType=="19 - Moped"]                = "Motorcycle"
data$VehicleType[data$VehicleType=="20 - Commercial Rig"]       = "Other"
data$VehicleType[data$VehicleType=="21 - Tandem Trailer"]       = "Other"
data$VehicleType[data$VehicleType=="22 - Mobile Home"]          = "Truck"
data$VehicleType[data$VehicleType=="23 - Travel/Home Trailer"]  = "Truck"
data$VehicleType[data$VehicleType=="24 - Camper"]               = "Truck"
data$VehicleType[data$VehicleType=="25 - Utility Trailer"]      = "Other"
data$VehicleType[data$VehicleType=="26 - Boat Trailer"]         = "Other"
data$VehicleType[data$VehicleType=="27 - Farm Equipment"]       = "Other"
data$VehicleType[data$VehicleType=="28 - Other"]                = "Other"
data$VehicleType[data$VehicleType=="29 - Unknown"]              = "Other"
data$VehicleType[is.na(data$VehicleType)]                       = "Other"
data$VehicleType = as.factor(data$VehicleType)
# Update Color
data$Color = as.character(data$Color)
data$Color[data$Color=="BEIGE"]       = "Color"
data$Color[data$Color=="BLACK"]       = "Black"
data$Color[data$Color=="BLUE"]        = "Color"
data$Color[data$Color=="BLUE, DARK"]  = "Color"
data$Color[data$Color=="BLUE, LIGHT"] = "Color"
data$Color[data$Color=="BRONZE"]      = "Color"
data$Color[data$Color=="BROWN"]       = "Color"
data$Color[data$Color=="CAMOUFLAGE"]  = "Color"
data$Color[data$Color=="CHROME"]      = "Gray"
data$Color[data$Color=="COPPER"]      = "Color"
data$Color[data$Color=="CREAM"]       = "Color"
data$Color[data$Color=="GOLD"]        = "Color"
data$Color[data$Color=="GRAY"]        = "Gray"
data$Color[data$Color=="GREEN"]       = "Color"
data$Color[data$Color=="GREEN, DK"]   = "Color"
data$Color[data$Color=="GREEN, LGT"]  = "Color"
data$Color[data$Color=="MAROON"]      = "Color"
data$Color[data$Color=="MULTICOLOR"]  = "Color"
data$Color[data$Color=="N/A"]     = "Other"
data$Color[data$Color=="ORANGE"]  = "Color"
data$Color[data$Color=="PINK"]    = "Color"
data$Color[data$Color=="PURPLE"]  = "Color"
data$Color[data$Color=="RED"]     = "Color"
data$Color[data$Color=="SILVER"]  = "Gray"
data$Color[data$Color=="TAN"]     = "Color"
data$Color[data$Color=="WHITE"]   = "White"
data$Color[data$Color=="YELLOW"]  = "Color"
data$Color[is.na(data$Color)]     = "Other"
data$Color = as.factor(data$Color)
# Update Race
data$Race = as.character(data$Race)
data$Race[data$Race=="NATIVE AMERICAN"]           = "OTHER"
data$Race = as.factor(data$Race)
# Update Make
makes <- c("ACURA", "ASTON MARTIN", "AUDI", "BENTLEY", "BENZ", "BMW", "CADILLAC", "BUICK", "CHEVROLET",
"CHEVY", "CHRYSLER", "CORVETTE", "DAEWOO", "DODGE", "DUCATI", "FERRARI", "FORD", "FIAT",
"GMC", "HONDA", "HUMMER", "HYUNDAI", "INFINITI", "ISUZU", "JAGUAR", "JEEP", "KAWASAKI",
"KIA", "LAND ROVER", "LAMBORGHINI", "LEXUS", "LINCOLN", "LOTUS", "MAZDA", "MASERATI",
"MINI", "MINI COOPER", "MITSUBISHI","NISSAN", "PEUGEOT", "PORSCHE",
"PONTIAC", "RENAULT", "ROLLS ROYCE", "RANGE ROVER", "ROVER", "SAAB", "SEAT", "SKODA", "SMART",
"SUBARU", "SUZUKI", "TESLA", "TOYOTA", "VOLKSWAGEN", "VOLVO", "YAMAHA")
data$Make = as.factor(makes[amatch(as.character(data$Make), makes, maxDist = 2)])
# Remove all rows where value of the "YEAR" is not between 1950-2017
data = filter(data, data$Year > 1950 & data$Year < 2017)
# Remove all rows where value of "Gender" is "U"
data = filter(data, data$Gender == "F" | data$Gender == "M")
# Remove all rows where value of "Color" is "Other"
data = filter(data, !(data$Color == "Other"))
# Reset factor levels to delete unused factors like "Other" in Color and "U" in Gender
data$Color <- factor(data$Color)
data$Gender <- factor(data$Gender)
# Remove NA coordinates rows
data = filter(data, !is.na(data$Latitude), !is.na(data$Longitude))
# Update column "Violation.Type" to see if the driver is a local or a tourist
data$Violation.Type <- ifelse(data$Violation.Type == "Citation", "Yes", "No")
data$Personal.Injury_Num <- ifelse(data$Personal.Injury == "Yes", 1, 0)
data$Property.Damage_Num <- ifelse(data$Property.Damage == "Yes", 1, 0)
data$Contributed.To.Accident_Num <- ifelse(data$Contributed.To.Accident == "Yes", 1, 0)
data$Gender_Num <- ifelse(data$Gender == "M", 0, 1)
data$Citation_Num <- ifelse(data$Violation.Type == "Yes", 1, 0)
data$Color_Num <- ifelse(data$Color == "White", 1,
ifelse(data$Color == "Gray", 2,
ifelse(data$Color == "Black", 3, 4)))
data$VehicleType_Num <- ifelse(data$VehicleType == "Motorcycle", 1,
ifelse(data$VehicleType == "Automobile", 2,
ifelse(data$VehicleType == "Truck", 3, 4)))
data$Race_Num <- ifelse(data$Race == "ASIAN", 1,
ifelse(data$Race == "BLACK", 2,
ifelse(data$Race == "WHITE", 3,
ifelse(data$Race == "HISPANIC", 4, 5))))
ranks <- rank(-table(data$Make), ties.method="first")
data$Make_Num <- ranks[as.character(data$Make)]
# Rename Columns
names(data)[names(data) == "Violation.Type"] = "Citation"
data$Citation = ordered(data$Citation, levels = c("No", "Yes"))
data$Interval_Num = as.numeric(data$Interval)
data$Day_Num = as.numeric(data$Day)
### Traffic Violation Hotspots Analysis
# Create Frame with Latitude & Longitude
coords = select(data, Latitude, Longitude); coords = coords[,2:1]
hotspot.wss <- numeric(15)
for (k in 1:15) hotspot.wss[k] <- sum(kmeans(coords, centers=k)$withinss)
plot(hotspot.wss)
hotspot.kmeans          = kmeans(coords[,1:2], 6)
hotspot.lookup          = mutate(as.data.frame(hotspot.kmeans$centers), Location = as.factor(apply(hotspot.kmeans$centers, 1, function(v) revgeocode(v, output = "more")$locality)))
hotspot.kmeans$cluster  = sapply(hotspot.kmeans$cluster, function(v) hotspot.lookup[v,]$Location)
hotspot.centers         = as.data.frame(hotspot.kmeans$centers)
data$Cluster = hotspot.kmeans$cluster
coords$Cluster = hotspot.kmeans$cluster
coords$Citation = data$Citation
rastered = raster(ncol=1000, nrow=100, xmn=-77.52, xmx=-76.9, ymn=38.93, ymx=39.35)
rasterized = rasterize(coords[,1:2], rastered, 1, fun = sum)
rasterized.prob = rasterize(coords[,1:2], rastered, ifelse(coords$Citation == "Yes", 1, 0) , fun = sum)
values(rasterized.prob) = values(rasterized.prob) / values(rasterized)
data$prob = values(rasterized.prob)[cellFromXY(rasterized.prob, coords[,1:2])]
data$prob[is.na(data$prob)] = 0
data$HighProb = ifelse(data$prob > 0.3, TRUE, FALSE)
data$HighProb_Num = ifelse(data$prob > 0.3, 1, 0)
set.seed(107)
inTrain <- createDataPartition(y = data$Citation, p = .9, list = FALSE)
training_data <- data[ inTrain,] ## 90% of original data
test_data  <- data[-inTrain,]
ctrl = trainControl(method="repeatedcv", number=5, repeats=2, summaryFunction = twoClassSummary, classProbs = TRUE)
model = as.formula(Citation ~ prob)
model_glm = train(model, data=training_data, method="J48", trControl=ctrl, metric="ROC")
model_glm = train(model, data=training_data, method="J48", trControl=ctrl, metric="ROC")
model_glm = train(model, data=training_data, method="J48", trControl=ctrl, metric="ROC")
model_glm = train(model, data=training_data, method="glm", trControl=ctrl, metric="ROC")
model_glm
model_glm$pred
ctrl = trainControl(method="repeatedcv", number=5, repeats=2, summaryFunction = twoClassSummary, classProbs = TRUE)
model = as.formula(Citation ~ prob)
model_glm = train(model, data=training_data, method="glm", trControl=ctrl, metric="ROC")
model_glm$pred
model_glm$pred$C
model_glm$pred$obs
model_glm$pred
model_glm$pred
model_glm$pred$obs
model_glm$pred$C
model_glm = train(model, data=training_data, method="glm", trControl=ctrl, metric="Accuracy")
