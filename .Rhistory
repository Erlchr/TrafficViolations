polygon.city        = ggmap(get_map(location = c(lon = x, lat = y), maptype = "roadmap", zoom = 13), extent = "device")
polygon.city.raster = geom_polygon(data=preparePolygon(r.city.rasterized), aes(x = long, y = lat, group = group, fill = layer), size = 0, alpha=0.6)
polygon.city.grid   = geom_line(data=preparePolygon(r.city), aes(x = long, y = lat, group = group), color = "gray47", size = 0.2)
polygon.city.legend = scale_fill_continuous(guide = "legend", limits = c(r.city.treshold, max(r.city.values, na.rm = T)), low = "red1", high = "red4")
map = polygon.city + polygon.maryland + polygon.city.grid + polygon.city.raster + polygon.city.legend + ggtitle(revgeocode(c))
ggsave(map, file = "figures/map_city.png", width = 5, height = 4, type = "cairo-png")
}
apply(r.topvalues.coordinates, 1, function(v) drawCityMaps(v))
apply(r.topvalues.coordinates, 1, function(v) drawCityMaps(v))
drawCityMaps <- function(c) {
x = c[1]; y = c[2]; span = 0.1
r.city = raster(ncol=50, nrow=50, xmn=x-span, xmx=x+span, ymn=y-span, ymx=y+span)
r.city.rasterized = rasterize(coords[,2:1], r.city, coords[,3], fun = sum)
r.city.treshold = 100
values(r.city.rasterized) = ifelse(values(r.city.rasterized) < r.city.treshold, NA, values(r.city.rasterized))
r.city.values = values(r.city.rasterized);
polygon.city        = ggmap(get_map(location = c(lon = x, lat = y), maptype = "roadmap", zoom = 14), extent = "device")
polygon.city.raster = geom_polygon(data=preparePolygon(r.city.rasterized), aes(x = long, y = lat, group = group, fill = layer), size = 0, alpha=0.6)
polygon.city.grid   = geom_line(data=preparePolygon(r.city), aes(x = long, y = lat, group = group), color = "gray47", size = 0.2)
polygon.city.legend = scale_fill_continuous(guide = "legend", limits = c(r.city.treshold, max(r.city.values, na.rm = T)), low = "red1", high = "red4")
map = polygon.city + polygon.maryland + polygon.city.grid + polygon.city.raster + polygon.city.legend + ggtitle(revgeocode(c))
ggsave(map, file = "figures/map_city.png", width = 5, height = 4, type = "cairo-png")
}
apply(r.topvalues.coordinates, 1, function(v) drawCityMaps(v))
drawCityMaps <- function(c) {
x = c[1]; y = c[2]; span = 0.1
r.city = raster(ncol=50, nrow=50, xmn=x-span, xmx=x+span, ymn=y-span, ymx=y+span)
r.city.rasterized = rasterize(coords[,2:1], r.city, coords[,3], fun = sum)
r.city.treshold = 100
values(r.city.rasterized) = ifelse(values(r.city.rasterized) < r.city.treshold, NA, values(r.city.rasterized))
r.city.values = values(r.city.rasterized);
r.city.topvalues = tail(sort(r.values), 1)
r.city.topvalues.indexes = match(r.city.topvalues, r.city.values)
r.city.topvalues.coordinates = xyFromCell(r.city.rasterized, cell = r.city.topvalues.indexes)
polygon.city        = ggmap(get_map(location = c(lon = x, lat = y), maptype = "roadmap", zoom = 14), extent = "device")
polygon.city.raster = geom_polygon(data=preparePolygon(r.city.rasterized), aes(x = long, y = lat, group = group, fill = layer), size = 0, alpha=0.6)
polygon.city.grid   = geom_line(data=preparePolygon(r.city), aes(x = long, y = lat, group = group), color = "gray47", size = 0.2)
polygon.city.legend = scale_fill_continuous(guide = "legend", limits = c(r.city.treshold, max(r.city.values, na.rm = T)), low = "red1", high = "red4")
map = polygon.city + polygon.maryland + polygon.city.grid + polygon.city.raster + polygon.city.legend + ggtitle(revgeocode(c))
ggsave(map, file = "figures/map_city.png", width = 5, height = 4, type = "cairo-png")
apply(r.topvalues.coordinates, 1, function(v) revgeocode(v))
}
drawCityMaps <- function(c) {
x = c[1]; y = c[2]; span = 0.05
r.city = raster(ncol=50, nrow=50, xmn=x-span, xmx=x+span, ymn=y-span, ymx=y+span)
r.city.rasterized = rasterize(coords[,2:1], r.city, coords[,3], fun = sum)
r.city.treshold = 100
values(r.city.rasterized) = ifelse(values(r.city.rasterized) < r.city.treshold, NA, values(r.city.rasterized))
r.city.values = values(r.city.rasterized);
r.city.topvalues = tail(sort(r.values), 1)
r.city.topvalues.indexes = match(r.city.topvalues, r.city.values)
r.city.topvalues.coordinates = xyFromCell(r.city.rasterized, cell = r.city.topvalues.indexes)
polygon.city        = ggmap(get_map(location = c(lon = x, lat = y), maptype = "roadmap", zoom = 14), extent = "device")
polygon.city.raster = geom_polygon(data=preparePolygon(r.city.rasterized), aes(x = long, y = lat, group = group, fill = layer), size = 0, alpha=0.6)
polygon.city.grid   = geom_line(data=preparePolygon(r.city), aes(x = long, y = lat, group = group), color = "gray47", size = 0.2)
polygon.city.legend = scale_fill_continuous(guide = "legend", limits = c(r.city.treshold, max(r.city.values, na.rm = T)), low = "red1", high = "red4")
map = polygon.city + polygon.maryland + polygon.city.grid + polygon.city.raster + polygon.city.legend + ggtitle(revgeocode(c))
ggsave(map, file = "figures/map_city.png", width = 5, height = 4, type = "cairo-png")
apply(r.topvalues.coordinates, 1, function(v) revgeocode(v))
}
apply(r.topvalues.coordinates, 1, function(v) drawCityMaps(v))
drawCityMaps <- function(c) {
x = c[1]; y = c[2]; span = 0.05
r.city = raster(ncol=25, nrow=25, xmn=x-span, xmx=x+span, ymn=y-span, ymx=y+span)
r.city.rasterized = rasterize(coords[,2:1], r.city, coords[,3], fun = sum)
r.city.treshold = 100
values(r.city.rasterized) = ifelse(values(r.city.rasterized) < r.city.treshold, NA, values(r.city.rasterized))
r.city.values = values(r.city.rasterized);
r.city.topvalues = tail(sort(r.values), 1)
r.city.topvalues.indexes = match(r.city.topvalues, r.city.values)
r.city.topvalues.coordinates = xyFromCell(r.city.rasterized, cell = r.city.topvalues.indexes)
polygon.city        = ggmap(get_map(location = c(lon = x, lat = y), maptype = "roadmap", zoom = 14), extent = "device")
polygon.city.raster = geom_polygon(data=preparePolygon(r.city.rasterized), aes(x = long, y = lat, group = group, fill = layer), size = 0, alpha=0.6)
polygon.city.grid   = geom_line(data=preparePolygon(r.city), aes(x = long, y = lat, group = group), color = "gray47", size = 0.2)
polygon.city.legend = scale_fill_continuous(guide = "legend", limits = c(r.city.treshold, max(r.city.values, na.rm = T)), low = "red1", high = "red4")
map = polygon.city + polygon.maryland + polygon.city.grid + polygon.city.raster + polygon.city.legend + ggtitle(revgeocode(c))
ggsave(map, file = "figures/map_city.png", width = 5, height = 4, type = "cairo-png")
apply(r.topvalues.coordinates, 1, function(v) revgeocode(v))
}
apply(r.topvalues.coordinates, 1, function(v) drawCityMaps(v))
drawCityMaps <- function(c) {
x = c[1]; y = c[2]; span = 0.1
r.city = raster(ncol=25, nrow=25, xmn=x-span, xmx=x+span, ymn=y-span, ymx=y+span)
r.city.rasterized = rasterize(coords[,2:1], r.city, coords[,3], fun = sum)
r.city.treshold = 100
values(r.city.rasterized) = ifelse(values(r.city.rasterized) < r.city.treshold, NA, values(r.city.rasterized))
r.city.values = values(r.city.rasterized);
r.city.topvalues = tail(sort(r.values), 1)
r.city.topvalues.indexes = match(r.city.topvalues, r.city.values)
r.city.topvalues.coordinates = xyFromCell(r.city.rasterized, cell = r.city.topvalues.indexes)
polygon.city        = ggmap(get_map(location = c(lon = x, lat = y), maptype = "roadmap", zoom = 14), extent = "device")
polygon.city.raster = geom_polygon(data=preparePolygon(r.city.rasterized), aes(x = long, y = lat, group = group, fill = layer), size = 0, alpha=0.6)
polygon.city.grid   = geom_line(data=preparePolygon(r.city), aes(x = long, y = lat, group = group), color = "gray47", size = 0.2)
polygon.city.legend = scale_fill_continuous(guide = "legend", limits = c(r.city.treshold, max(r.city.values, na.rm = T)), low = "red1", high = "red4")
map = polygon.city + polygon.maryland + polygon.city.grid + polygon.city.raster + polygon.city.legend + ggtitle(revgeocode(c))
ggsave(map, file = "figures/map_city.png", width = 5, height = 4, type = "cairo-png")
apply(r.topvalues.coordinates, 1, function(v) revgeocode(v))
}
apply(r.topvalues.coordinates, 1, function(v) drawCityMaps(v))
drawCityMaps <- function(c) {
x = c[1]; y = c[2]; span = 0.01
r.city = raster(ncol=25, nrow=25, xmn=x-span, xmx=x+span, ymn=y-span, ymx=y+span)
r.city.rasterized = rasterize(coords[,2:1], r.city, coords[,3], fun = sum)
r.city.treshold = 100
values(r.city.rasterized) = ifelse(values(r.city.rasterized) < r.city.treshold, NA, values(r.city.rasterized))
r.city.values = values(r.city.rasterized);
r.city.topvalues = tail(sort(r.values), 1)
r.city.topvalues.indexes = match(r.city.topvalues, r.city.values)
r.city.topvalues.coordinates = xyFromCell(r.city.rasterized, cell = r.city.topvalues.indexes)
polygon.city        = ggmap(get_map(location = c(lon = x, lat = y), maptype = "roadmap", zoom = 14), extent = "device")
polygon.city.raster = geom_polygon(data=preparePolygon(r.city.rasterized), aes(x = long, y = lat, group = group, fill = layer), size = 0, alpha=0.6)
polygon.city.grid   = geom_line(data=preparePolygon(r.city), aes(x = long, y = lat, group = group), color = "gray47", size = 0.2)
polygon.city.legend = scale_fill_continuous(guide = "legend", limits = c(r.city.treshold, max(r.city.values, na.rm = T)), low = "red1", high = "red4")
map = polygon.city + polygon.maryland + polygon.city.grid + polygon.city.raster + polygon.city.legend + ggtitle(revgeocode(c))
ggsave(map, file = "figures/map_city.png", width = 5, height = 4, type = "cairo-png")
apply(r.topvalues.coordinates, 1, function(v) revgeocode(v))
}
apply(r.topvalues.coordinates, 1, function(v) drawCityMaps(v))
drawCityMaps <- function(c) {
x = c[1]; y = c[2]; span = 0.02
r.city = raster(ncol=25, nrow=25, xmn=x-span, xmx=x+span, ymn=y-span, ymx=y+span)
r.city.rasterized = rasterize(coords[,2:1], r.city, coords[,3], fun = sum)
r.city.treshold = 100
values(r.city.rasterized) = ifelse(values(r.city.rasterized) < r.city.treshold, NA, values(r.city.rasterized))
r.city.values = values(r.city.rasterized);
r.city.topvalues = tail(sort(r.values), 1)
r.city.topvalues.indexes = match(r.city.topvalues, r.city.values)
r.city.topvalues.coordinates = xyFromCell(r.city.rasterized, cell = r.city.topvalues.indexes)
polygon.city        = ggmap(get_map(location = c(lon = x, lat = y), maptype = "roadmap", zoom = 14), extent = "device")
polygon.city.raster = geom_polygon(data=preparePolygon(r.city.rasterized), aes(x = long, y = lat, group = group, fill = layer), size = 0, alpha=0.6)
polygon.city.grid   = geom_line(data=preparePolygon(r.city), aes(x = long, y = lat, group = group), color = "gray47", size = 0.2)
polygon.city.legend = scale_fill_continuous(guide = "legend", limits = c(r.city.treshold, max(r.city.values, na.rm = T)), low = "red1", high = "red4")
map = polygon.city + polygon.maryland + polygon.city.grid + polygon.city.raster + polygon.city.legend + ggtitle(revgeocode(c))
ggsave(map, file = "figures/map_city.png", width = 5, height = 4, type = "cairo-png")
apply(r.topvalues.coordinates, 1, function(v) revgeocode(v))
}
apply(r.topvalues.coordinates, 1, function(v) drawCityMaps(v))
drawCityMaps <- function(c) {
x = c[1]; y = c[2]; span = 0.02
r.city = raster(ncol=25, nrow=25, xmn=x-span, xmx=x+span, ymn=y-span, ymx=y+span)
r.city.rasterized = rasterize(coords[,2:1], r.city, coords[,3], fun = sum)
r.city.treshold = 100
values(r.city.rasterized) = ifelse(values(r.city.rasterized) < r.city.treshold, NA, values(r.city.rasterized))
r.city.values = values(r.city.rasterized);
r.city.topvalues = tail(sort(r.values), 5)
r.city.topvalues.indexes = match(r.city.topvalues, r.city.values)
r.city.topvalues.coordinates = xyFromCell(r.city.rasterized, cell = r.city.topvalues.indexes)
polygon.city        = ggmap(get_map(location = c(lon = x, lat = y), maptype = "roadmap", zoom = 14), extent = "device")
polygon.city.raster = geom_polygon(data=preparePolygon(r.city.rasterized), aes(x = long, y = lat, group = group, fill = layer), size = 0, alpha=0.6)
polygon.city.grid   = geom_line(data=preparePolygon(r.city), aes(x = long, y = lat, group = group), color = "gray47", size = 0.2)
polygon.city.legend = scale_fill_continuous(guide = "legend", limits = c(r.city.treshold, max(r.city.values, na.rm = T)), low = "red1", high = "red4")
map = polygon.city + polygon.maryland + polygon.city.grid + polygon.city.raster + polygon.city.legend + ggtitle(revgeocode(c))
ggsave(map, file = "figures/map_city.png", width = 5, height = 4, type = "cairo-png")
apply(r.topvalues.coordinates, 1, function(v) revgeocode(v))
}
apply(r.topvalues.coordinates, 1, function(v) drawCityMaps(v))
drawCityMaps <- function(c) {
x = c[1]; y = c[2]; span = 0.02
r.city = raster(ncol=25, nrow=25, xmn=x-span, xmx=x+span, ymn=y-span, ymx=y+span)
r.city.rasterized = rasterize(coords[,2:1], r.city, coords[,3], fun = sum)
r.city.treshold = 100
values(r.city.rasterized) = ifelse(values(r.city.rasterized) < r.city.treshold, NA, values(r.city.rasterized))
r.city.values = values(r.city.rasterized);
r.city.topvalues = tail(sort(r.city.values), 5)
r.city.topvalues.indexes = match(r.city.topvalues, r.city.values)
r.city.topvalues.coordinates = xyFromCell(r.city.rasterized, cell = r.city.topvalues.indexes)
polygon.city        = ggmap(get_map(location = c(lon = x, lat = y), maptype = "roadmap", zoom = 14), extent = "device")
polygon.city.raster = geom_polygon(data=preparePolygon(r.city.rasterized), aes(x = long, y = lat, group = group, fill = layer), size = 0, alpha=0.6)
polygon.city.grid   = geom_line(data=preparePolygon(r.city), aes(x = long, y = lat, group = group), color = "gray47", size = 0.2)
polygon.city.legend = scale_fill_continuous(guide = "legend", limits = c(r.city.treshold, max(r.city.values, na.rm = T)), low = "red1", high = "red4")
map = polygon.city + polygon.maryland + polygon.city.grid + polygon.city.raster + polygon.city.legend + ggtitle(revgeocode(c))
ggsave(map, file = "figures/map_city.png", width = 5, height = 4, type = "cairo-png")
apply(r.topvalues.coordinates, 1, function(v) revgeocode(v))
}
apply(r.topvalues.coordinates, 1, function(v) drawCityMaps(v))
drawCityMaps <- function(c) {
x = c[1]; y = c[2]; span = 0.02
r.city = raster(ncol=25, nrow=25, xmn=x-span, xmx=x+span, ymn=y-span, ymx=y+span)
r.city.rasterized = rasterize(coords[,2:1], r.city, coords[,3], fun = sum)
r.city.treshold = 100
values(r.city.rasterized) = ifelse(values(r.city.rasterized) < r.city.treshold, NA, values(r.city.rasterized))
r.city.values = values(r.city.rasterized);
r.city.topvalues = tail(sort(r.city.values), 5)
r.city.topvalues.indexes = match(r.city.topvalues, r.city.values)
r.city.topvalues.coordinates = xyFromCell(r.city.rasterized, cell = r.city.topvalues.indexes)
polygon.city        = ggmap(get_map(location = c(lon = x, lat = y), maptype = "roadmap", zoom = 14), extent = "device")
polygon.city.raster = geom_polygon(data=preparePolygon(r.city.rasterized), aes(x = long, y = lat, group = group, fill = layer), size = 0, alpha=0.6)
polygon.city.grid   = geom_line(data=preparePolygon(r.city), aes(x = long, y = lat, group = group), color = "gray47", size = 0.2)
polygon.city.legend = scale_fill_continuous(guide = "legend", limits = c(r.city.treshold, max(r.city.values, na.rm = T)), low = "red1", high = "red4")
map = polygon.city + polygon.maryland + polygon.city.grid + polygon.city.raster + polygon.city.legend + ggtitle(revgeocode(c))
ggsave(map, file = "figures/map_city.png", width = 5, height = 4, type = "cairo-png")
apply(r.city.topvalues.coordinates, 1, function(v) revgeocode(v))
}
apply(r.topvalues.coordinates, 1, function(v) drawCityMaps(v))
drawCityMaps <- function(c) {
x = c[1]; y = c[2]; span = 0.02
r.city = raster(ncol=25, nrow=25, xmn=x-span, xmx=x+span, ymn=y-span, ymx=y+span)
r.city.rasterized = rasterize(coords[,2:1], r.city, coords[,3], fun = sum)
r.city.treshold = 100
values(r.city.rasterized) = ifelse(values(r.city.rasterized) < r.city.treshold, NA, values(r.city.rasterized))
r.city.values = values(r.city.rasterized);
r.city.topvalues = tail(sort(r.city.values), 5)
r.city.topvalues.indexes = match(r.city.topvalues, r.city.values)
r.city.topvalues.coordinates = xyFromCell(r.city.rasterized, cell = r.city.topvalues.indexes)
polygon.city        = ggmap(get_map(location = c(lon = x, lat = y), maptype = "roadmap", zoom = 14), extent = "device")
polygon.city.raster = geom_polygon(data=preparePolygon(r.city.rasterized), aes(x = long, y = lat, group = group, fill = layer), size = 0, alpha=0.6)
polygon.city.grid   = geom_line(data=preparePolygon(r.city), aes(x = long, y = lat, group = group), color = "gray47", size = 0.2)
polygon.city.legend = scale_fill_continuous(guide = "legend", limits = c(r.city.treshold, max(r.city.values, na.rm = T)), low = "red1", high = "red4")
map = polygon.city + polygon.maryland + polygon.city.grid + polygon.city.raster + polygon.city.legend
ggsave(map, file = "figures/map_city.png", width = 5, height = 4, type = "cairo-png")
apply(r.city.topvalues.coordinates, 1, function(v) revgeocode(v))
}
apply(r.topvalues.coordinates, 1, function(v) drawCityMaps(v))
drawCityMaps <- function(c) {
x = c[1]; y = c[2]; span = 0.04
r.city = raster(ncol=25, nrow=25, xmn=x-span, xmx=x+span, ymn=y-span, ymx=y+span)
r.city.rasterized = rasterize(coords[,2:1], r.city, coords[,3], fun = sum)
r.city.treshold = 100
values(r.city.rasterized) = ifelse(values(r.city.rasterized) < r.city.treshold, NA, values(r.city.rasterized))
r.city.values = values(r.city.rasterized);
r.city.topvalues = tail(sort(r.city.values), 5)
r.city.topvalues.indexes = match(r.city.topvalues, r.city.values)
r.city.topvalues.coordinates = xyFromCell(r.city.rasterized, cell = r.city.topvalues.indexes)
polygon.city        = ggmap(get_map(location = c(lon = x, lat = y), maptype = "roadmap", zoom = 13), extent = "device")
polygon.city.raster = geom_polygon(data=preparePolygon(r.city.rasterized), aes(x = long, y = lat, group = group, fill = layer), size = 0, alpha=0.6)
polygon.city.grid   = geom_line(data=preparePolygon(r.city), aes(x = long, y = lat, group = group), color = "gray47", size = 0.2)
polygon.city.legend = scale_fill_continuous(guide = "legend", limits = c(r.city.treshold, max(r.city.values, na.rm = T)), low = "red1", high = "red4")
map = polygon.city + polygon.maryland + polygon.city.grid + polygon.city.raster + polygon.city.legend
ggsave(map, file = "figures/map_city.png", width = 5, height = 4, type = "cairo-png")
apply(r.city.topvalues.coordinates, 1, function(v) revgeocode(v))
}
apply(r.topvalues.coordinates, 1, function(v) drawCityMaps(v))
library(utils)
URLencode("a url with spaces and / and @")
URLencode("22,23234234")
drawCityMaps <- function(c) {
x = c[1]; y = c[2]; span = 0.04
r.city = raster(ncol=25, nrow=25, xmn=x-span, xmx=x+span, ymn=y-span, ymx=y+span)
r.city.rasterized = rasterize(coords[,2:1], r.city, coords[,3], fun = sum)
r.city.treshold = 100
values(r.city.rasterized) = ifelse(values(r.city.rasterized) < r.city.treshold, NA, values(r.city.rasterized))
r.city.values = values(r.city.rasterized);
r.city.topvalues = tail(sort(r.city.values), 5)
r.city.topvalues.indexes = match(r.city.topvalues, r.city.values)
r.city.topvalues.coordinates = xyFromCell(r.city.rasterized, cell = r.city.topvalues.indexes)
polygon.city        = ggmap(get_map(location = c(lon = x, lat = y), maptype = "roadmap", zoom = 13), extent = "device")
polygon.city.raster = geom_polygon(data=preparePolygon(r.city.rasterized), aes(x = long, y = lat, group = group, fill = layer), size = 0, alpha=0.6)
polygon.city.grid   = geom_line(data=preparePolygon(r.city), aes(x = long, y = lat, group = group), color = "gray47", size = 0.2)
polygon.city.legend = scale_fill_continuous(guide = "legend", limits = c(r.city.treshold, max(r.city.values, na.rm = T)), low = "red1", high = "red4")
map = polygon.city + polygon.maryland + polygon.city.grid + polygon.city.raster + polygon.city.legend
ggsave(map, file = sprintf("figures/map_city%.3f%.3f.png",c[1], c[2]), width = 5, height = 4, type = "cairo-png")
apply(r.city.topvalues.coordinates, 1, function(v) revgeocode(v))
}
apply(r.topvalues.coordinates, 1, function(v) drawCityMaps(v))
drawCityMaps <- function(c) {
x = c[1]; y = c[2]; span = 0.04
r.city = raster(ncol=25, nrow=25, xmn=x-span, xmx=x+span, ymn=y-span, ymx=y+span)
r.city.rasterized = rasterize(coords[,2:1], r.city, coords[,3], fun = sum)
r.city.treshold = 100
values(r.city.rasterized) = ifelse(values(r.city.rasterized) < r.city.treshold, NA, values(r.city.rasterized))
r.city.values = values(r.city.rasterized);
r.city.topvalues = tail(sort(r.city.values), 5)
r.city.topvalues.indexes = match(r.city.topvalues, r.city.values)
r.city.topvalues.coordinates = xyFromCell(r.city.rasterized, cell = r.city.topvalues.indexes)
polygon.city        = ggmap(get_map(location = c(lon = x, lat = y), maptype = "roadmap", zoom = 13), extent = "device")
polygon.city.raster = geom_polygon(data=preparePolygon(r.city.rasterized), aes(x = long, y = lat, group = group, fill = layer), size = 0, alpha=0.6)
polygon.city.grid   = geom_line(data=preparePolygon(r.city), aes(x = long, y = lat, group = group), color = "gray47", size = 0.2)
polygon.city.legend = scale_fill_continuous(guide = "legend", limits = c(r.city.treshold, max(r.city.values, na.rm = T)), low = "red1", high = "red4")
map = polygon.city + polygon.maryland + polygon.city.grid + polygon.city.raster + polygon.city.legend
ggsave(map, file = sprintf("figures/map_city_%.3f_%.3f.png",c[1], c[2]), width = 5, height = 4, type = "cairo-png")
apply(r.city.topvalues.coordinates, 1, function(v) revgeocode(v))
}
apply(r.topvalues.coordinates, 1, function(v) drawCityMaps(v))
# Libraries
library(sp)
library(raster)
library(dplyr)
library(ggmap)
library(utils)
library(devtools)
install_version("ggplot2", version = "2.1.0", repos = "http://cran.us.r-project.org")
#---------- START HELPER METHODS ----------#
preparePolygon <- function(x) {
rtp <- rasterToPolygons(x)
rtp@data$id <- 1:nrow(rtp@data) # add id column for join
rtpFort <- fortify(rtp, data = rtp@data)
rtpFortMer <- merge(rtpFort, rtp@data, by.x = 'id', by.y = 'id')  # join data
return(rtpFortMer)
}
drawCityMaps <- function(c) {
x = c[1]; y = c[2]; span = 0.04
r.city = raster(ncol=25, nrow=25, xmn=x-span, xmx=x+span, ymn=y-span, ymx=y+span)
r.city.rasterized = rasterize(coords[,2:1], r.city, coords[,3], fun = sum)
r.city.treshold = 100
values(r.city.rasterized) = ifelse(values(r.city.rasterized) < r.city.treshold, NA, values(r.city.rasterized))
r.city.values = values(r.city.rasterized);
r.city.topvalues = tail(sort(r.city.values), 5)
r.city.topvalues.indexes = match(r.city.topvalues, r.city.values)
r.city.topvalues.coordinates = xyFromCell(r.city.rasterized, cell = r.city.topvalues.indexes)
polygon.city        = ggmap(get_map(location = c(lon = x, lat = y), maptype = "roadmap", zoom = 13), extent = "device")
polygon.city.raster = geom_polygon(data=preparePolygon(r.city.rasterized), aes(x = long, y = lat, group = group, fill = layer), size = 0, alpha=0.6)
polygon.city.grid   = geom_line(data=preparePolygon(r.city), aes(x = long, y = lat, group = group), color = "gray47", size = 0.2)
polygon.city.legend = scale_fill_continuous(guide = "legend", limits = c(r.city.treshold, max(r.city.values, na.rm = T)), low = "red1", high = "red4")
map = polygon.city + polygon.maryland + polygon.city.grid + polygon.city.raster + polygon.city.legend
ggsave(map, file = sprintf("figures/map_city_%.3f_%.3f.png",c[1], c[2]), width = 5, height = 4, type = "cairo-png")
apply(r.city.topvalues.coordinates, 1, function(v) revgeocode(v))
}
URLencode("a url with spaces and / and @")
#---------- END HELPER METHODS ----------#
#---------- START READING DATA ----------#
# File Names
dataCSVFileName = "traffic_violations.csv"
dataRDSFileName = "traffic_violations.rds"
# Save CSV as Binary
if(!file.exists(dataRDSFileName)) {
dataCSV = read.csv(dataCSVFileName)
saveRDS(dataCSV, dataRDSFileName)
}
# Read Data
data.raw = readRDS(dataRDSFileName)
#---------- END READING DATA ----------#
#---------- START DATA PREPARATION ----------#
# Remove redundant location information
data = select(data.raw, -Location, -Geolocation)
# Remove columns which has always the same value like "Agency = MCP" in each row of data
data = select(data, -Agency, -Accident, -Commercial.Vehicle)
# Remove irrelevant/unnecessary columns for analysis
data = select(data, -Commercial.License, -Work.Zone, -State, -Model, -Color, -DL.State)
data = select(data, -Fatal, -HAZMAT, -Charge, -Article)
# Remove NA coordinates rows
data = filter(data, !is.na(data$Latitude), !is.na(data$Longitude))
# Add a column "Local" to see if the driver is a local or a tourist
data$Local <- ifelse(data$Driver.State == "MD", TRUE, FALSE)
data = select(data, -Driver.State) # Remove Driver.State
#---------- END DATA PREPARATION ----------#
#---------- START DATA VISUALIZATION ----------#
# Traffic Violation Hotspots Analysis using raster package
# 1) Create Frame with Latitude & Longitude & Count (=1, needed for sum up)
# 2) Create Raster and rasterize the created Frame
# 3) Add Maryland Border Layer
# 4) Plot
coords = select(data, Latitude, Longitude)
coords = mutate(coords, count = 1)
r = raster(ncol=25, nrow=25, xmn=-77.5, xmx=-76.9, ymn=38.95, ymx=39.35)
r.rasterized = rasterize(coords[,2:1], r, coords[,3], fun = sum)
r.treshold = 500
values(r.rasterized) = ifelse(values(r.rasterized) < r.treshold, NA, values(r.rasterized))
r.values = values(r.rasterized); r.values = ifelse(r.values < r.treshold, NA, r.values)
r.topvalues = tail(sort(r.values), 10)
r.topvalues.indexes = match(r.topvalues, r.values)
r.topvalues.coordinates = xyFromCell(r.rasterized, cell = r.topvalues.indexes)
# r.topvalues.adresses = apply(r.topvalues.coordinates, 1, function(v) revgeocode(v))
map.maryland    = subset(getData("GADM", country="USA", level=2), NAME_1 == "Maryland")
polygon.montgomery  = ggmap(get_map(location = "Montgomery County", maptype = "roadmap", zoom = 10), extent = "device")
polygon.maryland    = geom_polygon(data=maryland, aes(x=long, y=lat), alpha = 0.1, fill = NA, color = "black")
polygon.raster      = geom_polygon(data=preparePolygon(r.rasterized), aes(x = long, y = lat, group = group, fill = layer), size = 0, alpha=0.3)
polygon.grid        = geom_line(data=preparePolygon(r), aes(x = long, y = lat, group = group), color = "gray47", size = 0.2)
polygon.legend      = scale_fill_continuous(guide = "legend", limits = c(r.treshold, max(r.values, na.rm = T)), low = "red1", high = "red4")
polygon.points      = geom_point(data = as.data.frame(r.topvalues.coordinates), aes(x=x, y=y), color="gray47", size = 2)
map.default = polygon.montgomery + polygon.maryland
map.grid = polygon.montgomery + polygon.maryland + polygon.grid
map.violations = polygon.montgomery + polygon.maryland + polygon.grid + polygon.raster + polygon.legend
map.violations2 = polygon.montgomery + polygon.maryland + polygon.points
ggsave(map.default, file = "figures/map_default.png", width = 5, height = 4, type = "cairo-png")
ggsave(map.grid, file = "figures/map_grid.png", width = 5, height = 4, type = "cairo-png")
ggsave(map.violations, file = "figures/map_violations.png", width = 5, height = 4, type = "cairo-png")
ggsave(map.violations2, file = "figures/map_violations2.png", width = 5, height = 4, type = "cairo-png")
apply(r.topvalues.coordinates, 1, function(v) drawCityMaps(v))
setwd("~/Documents/Studium/E_Business_Infrastructure/Group Project/Source")
map.maryland    = subset(getData("GADM", country="USA", level=2), NAME_1 == "Maryland")
polygon.montgomery  = ggmap(get_map(location = "Montgomery County", maptype = "roadmap", zoom = 10), extent = "device")
polygon.maryland    = geom_polygon(data=map.maryland, aes(x=long, y=lat), alpha = 0.1, fill = NA, color = "black")
polygon.raster      = geom_polygon(data=preparePolygon(r.rasterized), aes(x = long, y = lat, group = group, fill = layer), size = 0, alpha=0.3)
polygon.grid        = geom_line(data=preparePolygon(r), aes(x = long, y = lat, group = group), color = "gray47", size = 0.2)
polygon.legend      = scale_fill_continuous(guide = "legend", limits = c(r.treshold, max(r.values, na.rm = T)), low = "red1", high = "red4")
polygon.points      = geom_point(data = as.data.frame(r.topvalues.coordinates), aes(x=x, y=y), color="gray47", size = 2)
map.default = polygon.montgomery + polygon.maryland
map.grid = polygon.montgomery + polygon.maryland + polygon.grid
map.violations = polygon.montgomery + polygon.maryland + polygon.grid + polygon.raster + polygon.legend
map.violations2 = polygon.montgomery + polygon.maryland + polygon.points
ggsave(map.default, file = "figures/map_default.png", width = 5, height = 4, type = "cairo-png")
ggsave(map.grid, file = "figures/map_grid.png", width = 5, height = 4, type = "cairo-png")
ggsave(map.violations, file = "figures/map_violations.png", width = 5, height = 4, type = "cairo-png")
ggsave(map.violations2, file = "figures/map_violations2.png", width = 5, height = 4, type = "cairo-png")
apply(r.topvalues.coordinates, 1, function(v) drawCityMaps(v))
summary(data)
hotsport.wss <- numeric(15)
hotsport.wss <- numeric(15)
for (k in 1:10) hotsport.wss[k] <- sum(kmeans(coords, centers=k)$withinss)
plot(hotsport.wss)
coords
head(coords)
ggplot(data=df, aes(x=Latitude, y=Longitude, color=cluster )) +
geom_point() +
geom_point(data=centers, aes(x=V1,y=V2, color="Center")) +
geom_point(data=centers, aes(x=V1,y=V2, color="Center"), size=52, alpha=.3, legend=FALSE)
hotsport.kmeans = hotsport.kmeans = kmeans(coords, 3)
hotsport.kmeans$cluster #lets looks at cluster membership
hotsport.kmeans   = kmeans(coords, 9)
hotsport.cluster  = hotsport.kmeans$cluster
hotsport.centers  = hotsport.cluster$centers
hotsport.kmeans   = kmeans(coords, 9)
hotsport.cluster  = hotsport.kmeans$cluster
hotsport.centers  = hotsport.kmeans$centers
ggplot(data=df, aes(x=Latitude, y=Longitude, color=cluster )) +
geom_point() +
geom_point(data=hotsport.centers, aes(x=V1,y=V2, color="Center")) +
geom_point(data=hotsport.centers, aes(x=V1,y=V2, color="Center"), size=52, alpha=.3, legend=FALSE)
hotsport.kmeans   = kmeans(coords, 9)
hotsport.cluster  = hotsport.kmeans$cluster
hotsport.centers  = as.data.frame(hotsport.kmeans$centers)
ggplot(data=df, aes(x=Latitude, y=Longitude, color=cluster )) +
geom_point() +
geom_point(data=hotsport.centers, aes(x=V1,y=V2, color="Center")) +
geom_point(data=hotsport.centers, aes(x=V1,y=V2, color="Center"), size=52, alpha=.3, legend=FALSE)
# Traffic Violation Hotspots Analysis using kmeans clustering
# 1) Find optimal k
# 2)
hotsport.wss <- numeric(15)
for (k in 1:10) hotsport.wss[k] <- sum(kmeans(coords, centers=k)$withinss)
plot(hotsport.wss)
hotsport.kmeans   = kmeans(coords, 9)
hotsport.cluster  = hotsport.kmeans$cluster
hotsport.centers  = as.data.frame(hotsport.kmeans$centers)
ggplot(data=df, aes(x=Latitude, y=Longitude, color=cluster )) +
geom_point() +
geom_point(data=hotsport.centers, aes(x=V1,y=V2, color="Center")) +
geom_point(data=hotsport.centers, aes(x=V1,y=V2, color="Center"), size=52, alpha=.3)
hotsport.kmeans   = kmeans(coords, 9)
hotsport.cluster  = hotsport.kmeans$cluster
hotsport.centers  = as.data.frame(hotsport.kmeans$centers)
ggplot(data=df, aes(x=Latitude, y=Longitude, color=cluster )) +
geom_point() +
geom_point(data=hotsport.centers, aes(x=Longitude,y=Latitude, color="Center")) +
geom_point(data=hotsport.centers, aes(x=Longitude,y=Latitude, color="Center"), size=52, alpha=.3)
ggplot(data=df, aes(x=Latitude, y=Longitude, color=cluster ))
ggplot(data=df, aes(x=Longitude, y=Latitude, color=cluster )) +
geom_point() +
geom_point(data=hotsport.centers, aes(x=Longitude,y=Latitude, color="Center")) +
geom_point(data=hotsport.centers, aes(x=Longitude,y=Latitude, color="Center"), size=52, alpha=.3)
ggplot(data=coords, aes(x=Longitude, y=Latitude, color=cluster )) +
geom_point() +
geom_point(data=hotsport.centers, aes(x=Longitude,y=Latitude, color="Center")) +
geom_point(data=hotsport.centers, aes(x=Longitude,y=Latitude, color="Center"), size=52, alpha=.3)
ggplot(data=coords, aes(x=Longitude, y=Latitude, color="cluster" )) +
geom_point() +
geom_point(data=hotsport.centers, aes(x=Longitude,y=Latitude, color="Center")) +
geom_point(data=hotsport.centers, aes(x=Longitude,y=Latitude, color="Center"), size=52, alpha=.3)
ggplot(data=coords, aes(x=Longitude, y=Latitude, color="cluster" )) +
geom_point() +
geom_point(data=hotsport.centers, aes(x=Longitude,y=Latitude, color="Center")) +
geom_point(data=hotsport.centers, aes(x=Longitude,y=Latitude, color="Center"), size=52, alpha=.3)
ggplot(data=coords, aes(x=Longitude, y=Latitude, color="cluster" ))
ggplot(data=coords, aes(x=Longitude, y=Latitude, color="cluster" )) +
geom_point()
ggplot(data=coords, aes(x=Longitude, y=Latitude, color="cluster" )) +
geom_point(mapping = aes(x=Longitude, y=Latitude, color="blue"), show.legend = FALSE)
ggplot(data=coords, aes(x=Longitude, y=Latitude, color="blue" )) +
geom_point(mapping = aes(x=Longitude, y=Latitude, color="blue"), show.legend = FALSE)
hotsport.wss <- numeric(15)
for (k in 1:10) hotsport.wss[k] <- sum(kmeans(coords, centers=k)$withinss)
plot(hotsport.wss)
hotsport.kmeans   = kmeans(coords, 9)
hotsport.cluster  = hotsport.kmeans$cluster
hotsport.centers  = as.data.frame(hotsport.kmeans$centers)
ggplot(data=coords, aes(x=Longitude, y=Latitude, color="blue" )) +
geom_point(data=hotsport.centers, mapping = aes(x=Longitude, y=Latitude, color="blue"), show.legend=FALSE) +
geom_point(data=hotsport.centers, aes(x=Longitude, y=Latitude, color="red"), size=52, alpha=.3, show.legend=FALSE)
ggplot(data=coords, aes(x=Longitude, y=Latitude, color="blue" )) +
geom_point(data=hotsport.centers, mapping=aes(x=Longitude, y=Latitude, color="blue"), show.legend=FALSE) +
geom_point(data=hotsport.centers, mapping=aes(x=Longitude, y=Latitude, color="yellow"), size=52, alpha=.3, show.legend=FALSE)
hotsport.kmeans   = kmeans(coords, 9)
hotsport.cluster  = hotsport.kmeans$cluster
hotsport.centers  = as.data.frame(hotsport.kmeans$centers)
ggplot(data=coords, aes(x=Longitude, y=Latitude, color="blue" )) +
geom_point(data=hotsport.centers, mapping=aes(x=Longitude, y=Latitude, color="blue"), show.legend=FALSE) +
geom_point(data=hotsport.centers, mapping=aes(x=Longitude, y=Latitude, color="yellow"), size=52, alpha=.3, show.legend=FALSE)
ggplot(coords, aes(Longitude, Latitude, color=cluster)) + geom_point()
ggplot(coords, aes(Longitude, Latitude, color=cluster)) + geom_point()
ggplot(coords, aes(Longitude, Latitude, color="cluster")) + geom_point()
ggplot(coords, aes(Longitude, Latitude, color=hotsport.cluster)) + geom_point()
ggplot(coords, aes(Longitude, Latitude, color=hotsport.cluster)) + geom_point(size=0.5)
map.montgomery <- function(zoom = 10) {
return(ggmap(get_map(location = "Montgomery County", maptype = "roadmap", zoom = zoom), extent = "device"))
}
ggplot(coords, aes(Longitude, Latitude, color=hotsport.cluster)) + geom_point(size=0.5) + map.montgomery
ggplot(coords, aes(Longitude, Latitude, color=hotsport.cluster)) + geom_point(size=0.5) + map.montgomery(10)
map.montgomery <- function(zoom = 10) {
return(ggmap(get_map(location = "Montgomery County", maptype = "roadmap", zoom = zoom), extent = "device"))
}
polygon.montgomery  = ggmap(get_map(location = "Montgomery County", maptype = "roadmap", zoom = 10), extent = "device")
polygon.maryland    = geom_polygon(data=map.maryland, aes(x=long, y=lat), alpha = 0.1, fill = NA, color = "black")
polygon.raster      = geom_polygon(data=preparePolygon(r.rasterized), aes(x = long, y = lat, group = group, fill = layer), size = 0, alpha=0.3)
polygon.grid        = geom_line(data=preparePolygon(r), aes(x = long, y = lat, group = group), color = "gray47", size = 0.2)
polygon.legend      = scale_fill_continuous(guide = "legend", limits = c(r.treshold, max(r.values, na.rm = T)), low = "red1", high = "red4")
polygon.points      = geom_point(data = as.data.frame(r.topvalues.coordinates), aes(x=x, y=y), color="gray47", size = 2)
map.montgomery(10)
ggplot(coords, aes(Longitude, Latitude, color=hotsport.cluster)) + geom_point(size=0.5) + map.montgomery(10)
map.montgomery(zoom=10)
ggmap(get_map(location = "Montgomery County", maptype = "roadmap", zoom = zoom), extent = "device")
ggmap(get_map(location = "Montgomery County", maptype = "roadmap", zoom = 10), extent = "device")
get_map(location = "Montgomery County", maptype = "roadmap", zoom = zoom)
setwd("~/Documents/Studium/E_Business_Infrastructure/Group Project/Source")
get_map(location = "Montgomery County", maptype = "roadmap", zoom = zoom)
ggmap(get_map(location = "Montgomery County", maptype = "roadmap", zoom = 10), extent = "device")
setwd("~/Documents/Studium/E_Business_Infrastructure/Group Project/Source")
map.montgomery(zoom=10)
map.montgomery <- function(zoom = 10) {
return(ggmap(get_map(location = "Montgomery County", maptype = "roadmap", zoom = zoom), extent = "device"))
}
map.montgomery(zoom=10)
get_map(location="New York, NY",zoom=9,maptype="roadmap",color="bw")
